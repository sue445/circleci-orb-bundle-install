description: |
  Run `bundle install` using cache.

parameters:
  cache_key_prefix:
    type: string
    default: "v1-bundle"
    description: "Key prefix of cache"
  bundle_jobs:
    type: integer
    default: 4
    description: "Passed to `bundle install --jobs`"
  bundle_retry:
    type: integer
    default: 3
    description: "Passed to `bundle install --retry`"
  bundle_path:
    type: string
    default: "vendor/bundle"
    description: "Passed to `bundle config set path`"
  bundle_gemfile:
    type: string
    default: "Gemfile"
    description: "Passed to `bundle install --gemfile`"
  bundle_clean:
    type: boolean
    default: true
    description: "Whether run `bundle config set clean 'true'`"
  bundle_extra_args:
    type: string
    default: ""
    description: "Arguments to pass to `bundle install`"
  restore_bundled_with:
    type: boolean
    default: true
    description: "Whether resolve bundler version difference between `Gemfile.lock` and pre-installed in CI"
  with_gemfile_lock:
    type: boolean
    default: true
    description: "Whether using Gemfile.lock for cache key"
  gemspec_name:
    type: string
    default: ""
    description: "gemspec name (required if with_gemfile_lock is false)"
  update_always:
    type: boolean
    default: false
    description: "Whether run always `bundle update` when `with_gemfile_lock` is disabled"

steps:
  - when:
      condition: << parameters.with_gemfile_lock >>
      steps:
        - restore_cache:
            keys:
              - << parameters.cache_key_prefix >>-{{ .Environment.CIRCLE_JOB }}-{{ checksum "<< parameters.bundle_gemfile >>.lock" }}-{{ .Branch }}
              - << parameters.cache_key_prefix >>-{{ .Environment.CIRCLE_JOB }}-{{ checksum "<< parameters.bundle_gemfile >>.lock" }}
              - << parameters.cache_key_prefix >>-{{ .Environment.CIRCLE_JOB }}
              - << parameters.cache_key_prefix >>

  - unless:
      condition: << parameters.with_gemfile_lock >>
      steps:
        - restore_cache:
            keys:
              - << parameters.cache_key_prefix >>-{{ .Environment.CIRCLE_JOB }}-{{ checksum "<< parameters.bundle_gemfile >>" }}-{{ checksum "<< parameters.gemspec_name >>.gemspec" }}-{{ .Branch }}
              - << parameters.cache_key_prefix >>-{{ .Environment.CIRCLE_JOB }}-{{ checksum "<< parameters.bundle_gemfile >>" }}-{{ checksum "<< parameters.gemspec_name >>.gemspec" }}
              - << parameters.cache_key_prefix >>-{{ .Environment.CIRCLE_JOB }}-{{ checksum "<< parameters.bundle_gemfile >>" }}
              - << parameters.cache_key_prefix >>-{{ .Environment.CIRCLE_JOB }}
              - << parameters.cache_key_prefix >>

  - run:
      name: bundle install
      command: |
        set -xe
        bundle_install_args="--jobs=<< parameters.bundle_jobs >> --retry=<< parameters.bundle_retry >> --gemfile=<< parameters.bundle_gemfile >>"

        bundle config set path "<< parameters.bundle_path >>"

        <<# parameters.bundle_clean >>
        bundle config set clean 'true'
        <</ parameters.bundle_clean >>

        bundle_extra_args="<< parameters.bundle_extra_args >>"
        if [ -n "$bundle_extra_args" ]; then
          bundle_install_args="$bundle_install_args $bundle_extra_args"
        fi

        with_gemfile_lock="false"
        <<# parameters.with_gemfile_lock >>
        with_gemfile_lock="true"
        <</ parameters.with_gemfile_lock >>

        if [ $with_gemfile_lock == "true" ]; then
          bundle install $bundle_install_args
        else
          run_bundle_install="true"
          <<# parameters.update_always >>
          run_bundle_install="false"
          <</ parameters.update_always >>

          if [ $run_bundle_install == "true" ]; then
            set +e
            bundle install $bundle_install_args
            ret=$?
            set -e
          else
            ret=1
          fi

          # Retry with `bundle update` if `bundle install` is failed
          if [ $ret -ne 0 ]; then
            # NOTE: `.bundle/config` is not created after `bundle install` is failed
            mkdir -p .bundle/
            echo '---' > .bundle/config
            echo 'BUNDLE_PATH: "<< parameters.bundle_path >>"' >> .bundle/config
            bundle update --jobs=<< parameters.bundle_jobs >>
          fi
        fi

  - when:
      condition: << parameters.restore_bundled_with >>
      steps:
        - when:
            condition: << parameters.with_gemfile_lock >>
            steps:
              - run:
                  name: "restore-bundled-with"
                  command: |
                    set -xe

                    if [ "<< parameters.bundle_gemfile >>" == "Gemfile" ]; then
                      gem install restore_bundled_with --no-document
                      restore-bundled-with
                    fi

  - when:
      condition: << parameters.with_gemfile_lock >>
      steps:
        - save_cache:
            key: << parameters.cache_key_prefix >>-{{ .Environment.CIRCLE_JOB }}-{{ checksum "<< parameters.bundle_gemfile >>.lock" }}-{{ .Branch }}
            paths:
              - << parameters.bundle_path >>

  - unless:
      condition: << parameters.with_gemfile_lock >>
      steps:
        - save_cache:
            key: << parameters.cache_key_prefix >>-{{ .Environment.CIRCLE_JOB }}-{{ checksum "<< parameters.bundle_gemfile >>" }}-{{ checksum "<< parameters.gemspec_name >>.gemspec" }}-{{ .Branch }}
            paths:
              - << parameters.bundle_path >>
              - Gemfile.lock
